Funky Fresh Framework
~~~

TODO:
~~~
- Add an Event track to the sequence for loading assets etc. - STARTED
    - Replace events with tasks. - DONE
    - Add asset loading from SWRAM. - DONE
- Add a FX display track and a second simple effect (probably display Main/Shadow). - DONE
    - Add FX display from SWRAM - TODO
- Much tidying up and code rearrangement needed. - DONE
    - Assets.
    - Display FX.
    - Separate out FX.
    - Rocket.

- Add another RVI effect that can be switched between. - DONE
    - Chunky Twister.
- Figure out the run-time, no editor, track data interpolation. - DONE
- Make a sequence! - DONE TEST
- Move screen to 240 lines => 16 more scanlines. - DONE
    - R6=30, R7=34.
- Chunky Twister just runs automatically - how to drive from Rocket? - DONE
- Transitions! Top & bottom bars? <= NEXT!
- Need a solution for the top row so not always fixed to scanline 0. - DONE
- Add more FX.
    - Frak Zoomer
    - Psuedo-3D?
    - Tech-tech?
    - EI style wibble appear?


Track controls.
~~~
=> Up to individual FX if they can respect these.
=> Probably need a table ultimately?
=> Encourage more generic tracks?
=> Best practice: Try to drive variables directly in update rather than "delta values".
=> Best practice: Can use "delta values" safely in draw.
=> Best practice: Use as many bits of the track values as possible to aid interpolation, shift down at runtime if needed.

zoom = scale factor (e.g. vertical stretch)
x_pos = generic x value
y_pos = generic y value
time = generic 'time' value that drives the animation

bg_colour = general background colour?
top_bar = position of top bar (0-127)
top_colour = colour of top bar
bottom_bar = position of bottom bar (0-127)
bottom_colour = colour of bottom bar

pulse = generic value used to pulse to the beat? (interpreted by each FX?)
speed/direction = generic twiddlable?

Ponder.
~~~
- Loading full 20K screens during RVI takes a loooooong time.
    - Takes 104 tracker rows = 416 vsyncs = 8.32s
    - Perhaps just need to temper the pace of the demo?
    => Check timing if reclaiming 16 scanlines from the visible screen.

- Scrubbing plus task loading ends up with the start of the demo not being realistic from a load-time POV.
    - Once MAIN & SHADOW RAM are initialised, you can't uninitialise them.
    - Perhaps if the task on the first line were a (debug) screen wipe? DONE.
    - Could run the entire demo from frame 0 on restart? -> this doesn't help with scrubbing?
    => Need to reset all vars to 0 at start of the sequence. So first line should be a "demo reset" task.

- Staring in the middle of the sequence means it's likely to have missed a task to initalise one of the screens.
    - Or the sequence author just has to be aware of this limitation?
        => restart sequence higher up? or will this become an issue later in the demo?
    => Could have two separate task tracks one for MAIN and one for SHADOW?

- Might need a way of initialising FX (vars) so that editing is the same as playback.
    - E.g. currently the twister just carries on from wherever it last was.
    - Can't do this in a task as has to be guaranteed before the first update!

- "Demo reset" task at the top to ensure all FX vars are zero'd when playing from the beginning?
    -> Shouldn't need to do this if update values are driven from Rocket!

- Might need more than 8.8 bits for interpolation?
    - Add another byte? Don't want to have to do 24 bit addition for every value!
    - Can gain extra bits by shifting up in the editor and down at run-time.
        E.g. if sane range is [0-10] then << 4 in the editor and >> 4 at runtime. If there's time!

- What to do about the first row of the screen currently fixed to scanline 0?
    - Maybe start draw at scanline -2 so can do RVI on first row?
    - We're effectively treating row 0 as special anyway or does this double that up?
    - VectorEyes had some cunning approach for EI?

- what do about the feather edge of the Chunky Twister?
    - Is there a general-ish solution to this?
    - Force screen off during hblank?

Nice to haves.
~~~
- Having an automatic way of packing assets into SWRAM banks would be great!
- Create separate loader for SWRAM banks etc. so can dump the code and reclaim the RAM?

BUGS:
> Glitch at the bottom of Vertical Stretch FX - FIXED
> Can't safely switch from Chunky Twister to Vertical Stretch. - FIXED R9 set on last scanline!
> DEBUG (UNUSUAL): Indirect access to register $FCC3 at $153D - FIXED
> Doom screen doesn't get loaded if Rocket starts at or after that row? - DUPE

Rocket Run time
~~~
- Always do 16-bit add for each track.
- Perhaps step keys should just be single byte?
- Or find some way of encoding two bytes values in a float. BCD-ish? 99.99

Borders
~~~
- Add this explicitly to each FX or possible to layer somehow?
- Ways of doing this:
  - Set 16x palette entries to same colour = 16x6c = 96c (can't do this in hblank.)
  - Display N blank lines and just set bg colour.
  - FX are going to have to be "border aware":
    - Set timer so draw fn gets called at HCC=0 but scanline=-2, to give time to set first visible scanline correctly.
    - Ensure prev_scanline variable is correct across all FX to enable this.
    - Have top_border_draw fn that returns after N scanlines + fixed number of cycles.
    - Set row_count so that main draw loop is correct wrt borders.
    - Have a bottom_border_draw fn that correctly finishes the frame.
