Funky Fresh Framework
~~~

TODO 2022: Target NOVA 12 August 2022.
~~~
- Move to RTW's approach for removing LHS RVI garbage. - DONE
- Implement checkboard zoom FX. - STARTED
- Tidy up all FX and decide which need garbage removal.
- Check on real hw including PVM if possible.
- Improve Frak zoomer FX.
    - Some additional 'sprites'?
    - Change bg colour?
- Need something for displaying text for greets / credits
    - Ideally large moving text, two independently.
    - Slide and wobble?
- Simple approach to nice transitions.
    - Perhaps have a transition track and let each FX handle this out/in?
- Music from Rhino.
- Sequencing.
- One more FX? (only if time)
    - Psuedo textured 3D?



TODO:
~~~
- Add an Event track to the sequence for loading assets etc. - STARTED
    - Replace events with tasks. - DONE
    - Add asset loading from SWRAM. - DONE
- Add a FX display track and a second simple effect (probably display Main/Shadow). - DONE
    - Add FX display from SWRAM - TODO
- Much tidying up and code rearrangement needed. - DONE
    - Assets.
    - Display FX.
    - Separate out FX.
    - Rocket.
- Add another RVI effect that can be switched between. - DONE
    - Chunky Twister.
- Figure out the run-time, no editor, track data interpolation. - DONE
- Make a sequence! - DONE TEST
- Move screen to 240 lines => 16 more scanlines. - DONE
    - R6=30, R7=34.
- Chunky Twister just runs automatically - how to drive from Rocket? - DONE
- Need a solution for the top row so not always fixed to scanline 0. - DONE
- Move FX code to SWRAM as out of core RAM. - DONE
- Fix top row of vertical stretch. - DONE
- Sort out FX owning their palette. - DONE => FX Must reset any colours altered at end of draw.
- Move to 2x tasks for main & shadow. - STARTED, TO TIDY.

- Transitions! Top & bottom bars?
- Add more FX.
    - Frak Zoomer
    - Psuedo-3D?
    - Tech-tech?
    - EI style wibble appear?
    - Text slide on and stick top line

- Update Rocket integration to save track files in the right folder.
- Write up Shadow World demo idea. - DONE
- Add data byte to display_fx track.


Track controls.
~~~
=> Up to individual FX if they can respect these.
=> Probably need a table ultimately?
=> Encourage more generic tracks?
=> Best practice: Try to drive variables directly in update rather than "delta values".
=> Best practice: Can use "delta values" safely in draw.
=> Best practice: Use as many bits of the track values as possible to aid interpolation, shift down at runtime if needed.
=> Requirements: Set display registers in draw, inc. R12/13.
=> Requirements: Reset lower 8 colours of palette at end of draw if changed.

zoom = scale factor (e.g. vertical stretch)
x_pos = generic x value
y_pos = generic y value
anim_time = generic 'time' value that drives the animation

bg_colour = general background colour?
top_bar = position of top bar (0-127)
top_colour = colour of top bar
bottom_bar = position of bottom bar (0-127)
bottom_colour = colour of bottom bar

pulse = generic value used to pulse to the beat? (interpreted by each FX?)
speed/direction = generic twiddlable?

Ponder.
~~~
- Loading full 20K screens during RVI takes a loooooong time.
    - Takes 104 tracker rows = 416 vsyncs = 8.32s
    - Perhaps just need to temper the pace of the demo?
    => Check timing if reclaiming 16 scanlines from the visible screen.
    => Use transitions of static screens where possible to gain cycles.

- Scrubbing plus task loading ends up with the start of the demo not being realistic from a load-time POV.
    - Once MAIN & SHADOW RAM are initialised, you can't uninitialise them.
    - Perhaps if the task on the first line were a (debug) screen wipe? DONE.
    - Could run the entire demo from frame 0 on restart? -> this doesn't help with scrubbing?
    => Need to reset all vars to 0 at start of the sequence. So first line should be a "demo reset" task.

- Staring in the middle of the sequence means it's likely to have missed a task to initalise one of the screens.
    - Or the sequence author just has to be aware of this limitation?
        => restart sequence higher up? or will this become an issue later in the demo?
    => Could have two separate task tracks one for MAIN and one for SHADOW? - DONE.

- Might need a way of initialising FX (vars) so that editing is the same as playback. - DONE.
    - E.g. currently the twister just carries on from wherever it last was.
    - Can't do this in a task as has to be guaranteed before the first update!
    - Use "time" track. <= should really be "anim_time".

- "Demo reset" task at the top to ensure all FX vars are zero'd when playing from the beginning?
    -> Shouldn't need to do this if update values are driven from Rocket!

- Might need more than 8.8 bits for interpolation?
    - Add another byte? Don't want to have to do 24 bit addition for every value!
    - Can gain extra bits by shifting up in the editor and down at run-time.
        E.g. if sane range is [0-10] then << 4 in the editor and >> 4 at runtime. If there's time!

- What to do about the first row of the screen currently fixed to scanline 0? - DONE.
    - Maybe start draw at scanline -2 so can do RVI on first row?
    - We're effectively treating row 0 as special anyway or does this double that up?
    - VectorEyes had some cunning approach for EI?

- What do about the feather edge of the Chunky Twister? - DONE.
    - Is there a general-ish solution to this? => R0=0.
    - Force screen off during hblank? => RTW investigating a solution!

- All FX need to manage their own palette updates as well.
    - Even if set to default, this needs to be done in FX update.



Nice to haves.
~~~
- Having an automatic way of packing assets into SWRAM banks would be great!
- Create separate loader for SWRAM banks etc. so can dump the code and reclaim the RAM?

BUGS:
> Glitch at the bottom of Vertical Stretch FX - FIXED
> Can't safely switch from Chunky Twister to Vertical Stretch. - FIXED R9 set on last scanline!
> DEBUG (UNUSUAL): Indirect access to register $FCC3 at $153D - FIXED
> Doom screen doesn't get loaded if Rocket starts at or after that row? - DUPE

Rocket Run time
~~~
- Always do 16-bit add for each track.
    => Optimise by removing interpolation for fixed key tracks.
- Perhaps step keys should just be single byte?
- Or find some way of encoding two bytes values in a float. BCD-ish? 99.99 - DONE

Borders
~~~
- Add this explicitly to each FX or possible to layer somehow?
- Ways of doing this:
  - Set 16x palette entries to same colour = 16x6c = 96c (can't do this in hblank.)
  - Display N blank lines and just set bg colour.
  - FX are going to have to be "border aware":
    - Set timer so draw fn gets called at HCC=0 but scanline=-2, to give time to set first visible scanline correctly.
    - Ensure prev_scanline variable is correct across all FX to enable this.
    - Have top_border_draw fn that returns after N scanlines + fixed number of cycles.
    - Set row_count so that main draw loop is correct wrt borders.
    - Have a bottom_border_draw fn that correctly finishes the frame.

LHS Visible Garbage problem
~~~
- Palette switch can work but is painful to thread into the RVI code.
  - Lose 4 columns to LHS of regular screen - looks meh
  - Could maybe horizontally adjust to compensate - only go to 101c so 3c. :\
  - Can make visible screen 2 chars wider so lose one column either side.
  => This isn't going to work for pan & zoom w/ coloured bg. :((
  
- Turning the display off takes too long as it's a CRTC reg write.
  - Have to write R0 at HCC=0 so even with X&Y preloaded would take 12c!

- Idea of using R0=0 for burning scanlines.
  - Works in beebjit but not real hw. :( <= DONE.
  - Presume the change from R0=0 to R0=127 isn't taking place as expected vs scanline counter.
  - Could try to determine this behaviour on real hw.

- Could just skip drawing every other line ala beeb-niccc!
  - Actually looks quite nice - would have to be a deliberate stylistic choice!

- Use R0=0 to blank characters!
  - Seems to freeze the scanline counter (although no emulators support yet). <= Added to beebjit.
  - Use regular RVI to select scanline but set R0=0 for final 6 cycles = 6 blank chars.
  - This would mean moving everything 6 cycles earlier => start at 96c
  - Means that hsync would have to move to 95c = 3 chars to the right, hmmm.
  - On real hw the blanking works \o/ but moving the screen right means more visible on the left /o\
  - Just one column visible on far left of real CUB monitor
  - Maybe set screen width to 78c? Narrowing screen makes it less offset but doesn't stop visible column.
  - Ideally want to get hsync=96 gah!

- Shorten the number of scanlines burned?
  - Reduce to 9 scanlines from 13 breaks when selecting scanline 6 next after 0 or 2 because R9 < next.
  - Option: dump scanline 6&7? Wasting 25% of FX RAM - although still 3/6x more than vanilla vrup.
  - Or try to special case these somehow?!
      For 0->6, Set R9=1,wait for end of row,Set R9=7,Set R0=?,Set R0=1,wait 4 scanlines,Set R0=128
      For 2->6, Set R9=3,wait for end of row,Set R9=7,Set R0=?,Set R0=1,wait 4 scanlines,Set R0=128
      Not enough cycles!
  - Instead think about restructuring effects based on the scanlines.
    So use <=6 scanlines for effects that cannot have LH column pre-masked.
    E.g. Scanlines 01 & 23 OR 45 & 67 in the same effect. Use 0123 & 4567 for even chunkier ones.

  - Chunky Twister:
      Use 2x2 scanlines per row only. So 64 prerendered rows in one screen.
      But! Only use a quarter twist across those 64 and use a palette switch for the rest.
      So brads [0-255] where the top 2 bits are the colour palette and bottom 6 bits are the prerendered rows.
      DONE!


Frequency FX
~~~
Actual freq = 4,000,000 / 32 * sn_value (10-bits)
We don't care about actual freq but need a 1/sn_value to get linear coverage.
Hmmm, linear coverage doesn't help.
- Slow down the fade so the screen is fuller.
- Set up table for brightness fade.
- Add random or vsync offset to fill up the screen?
  - vsync doesn't work - try random but on beat?
- Can this be done at the same time as stretch?
  - There are 114c spare but not contiguous!

Rather than freq, maybe other patterns would be more fun on the grid?
- Strobing squares, spirals, etc.
- Argh! How to define all these w/out endless code?
- This is a take on the Loonies Phosphor demo-ish?

Zoom
~~~
How to get the x & y pos tracks to work nicely?
If we're imagining that this is a camera looking at a flat plane from distance
1 (1 texel = 80 screen pixels) to 80 (1 texel = 1 screen pixel) then Ideally
want x & y pos to be in the same coordinate system, so an xpos covers the entire
width of the sprite at any distance.

Need to calculate dx for each distance.
char_offset = x_pos * dx
Where dx = max_char_width/16
0: dx = 16/16 = 1
34: dx = 640/16 = 40
Restrict x_pos to [0,16) as moving two texels at a time so fp 4.8
Max_char_width is fp 12.0
Ideally multiply to 16.8 but only need 

char_offset = x_pos * max_char_width >> 12 = top 12-bits of multiplication.
Screen is 80 chars wide.
80/16=5 => 8
80/32=2.5 => 12
80/64=1.25 => 5.9
80/128=0.625 => 10.8
80/160=0.5 => 12
80/213=0.3756 => 12.8
At distance d, edge of viewport in X is?

Viewport is 80 units wide so 40 units from centre to left edge.
Need to subtract 40*dv from the x_pos before calculating the char_offset to get left edge in chars.
left_pos = (x_pos - 40*dv) MOD 16

Batman demo zoomer scrolls at constant rate in pixels to nowhere near the same zoom.
Zooms down to about 16 texels visible. Presumably has 256 chars per zoom fixed?
So just prerender all of them then just wrap at 255-80=175
Or just have 3x screen widths, i.e. 3x80chars = 240 = 480 bytes
Would give 42 zooms max.

Belated note for 2022: it's a massive PITA to wrap so just don't do it. Scroll a viewport around
a limited canvas size, just make the canvas large enough for the effect to be effective!

Further thoughts: we only need one scanline repeated, so don't need to do RVI to select scanlines -
it would be simpler to just use a Kefrens setup to duplicate the same line. Blit 80 bytes into the
screen buffer in update. This then gives us all 20K of RAM for the zooming canvas, say 320 bytes wide
per zoom provides 50 zoom levels for 16K (assume these are Amstrad figures).
Need to offset the viewport for each zoom so the panning works... still can't quite figure out how to
decouple the zoom from the X offset.

I wonder if the X animation is baked into the zoom & wobble, so 320 frames of anim x 80 bytes 
=25K. This would then make it pixel smooth horizontally, with vertical motion separated to make
a sequence that can be repeated but looks different.


2022 Thoughts
~~~
Only implement LHS garbage removal if necessary - it's quite expensive but does work!

Suggest focusing on the zoom/scale effects.
- Checkerboard layers.
- Full logo zoom or flip with perspective.
- Sprite made from colour palette changes zoom/cube.
- Scrolltext with bounce / stretch.
- 

More thoughts:
- A bounce! I need bouncing!
- Stop overcomplicating things!!!!
    - Scrubbing is cool but not essential (see NOVA Invite)
    - Everything doesn't have to be 160x120 double scanlines.
    - Particularly with RTW's RVI technique.
- Have lots of effects already - need transitions as a priority!
- Prototype transitions in Owlet?
    - Wipe with 8 or 16 colours in different directions
    - Horizontal, vertical, diagonal.
- In Rocket everything is too linear at the moment
    - Use Rocket as a trigger where necessary, rather than driving the effect at runtime.
    - Use non-linear motion wherever possible - movement, energy! => tables!
- Use Rocket for what it's good at:
    - Gives us fine control over what is loaded & displayed when
    - Switching between effects that look the same but are driven differently (transitions)
    - Rocket tracks very handy when prototyping and discovering / testing parameters.
    - But once established drive anim sequences from code / tables.
    - Too many Rocket tracks isn't going to scale at runtime (NOVA had just 4x effect commands...)
        => per frame runtime cost is 33c per track to interpolate
        => plus XXc per key updated on that frame.
- Edge of Disgrace energy level!
    - Get some art to inspire.
    - Get Rhino onboard sooner.

Wipes
~~~
Just changing the colour palette looks v boring and coarse even at 16 colours.
Perhaps use the Twisted Brain vertical blind effect instead?
Use a single (or double) scanline repeated across the whole screen
- saves screen RAM for loading other assets
- have N vertical strips, make them thinner from both sides
- could also do horizontal strips in a different way
- can't do diagonal wipes.
    - possibly could by shifting pixels every N.n scanlines but probably not worth it!
- also annoyingly can't yield the draw region to the bg task.
- need a rough interrupt somewhere on the last line to setup vsync.
=> Stop overcomplicating things, as ever!

Thoughts:
- Triggers work OK but a little funky
- Need to know when is the first frame of a new FX. - DONE
- How do we want to handle palette changes in general?
   - Is this a separate track to define the palette?
   - Could set individual colours as LOGICAL.physical bytes?
   - Not a task but maybe an events track?!
   - By extension would then end up with multiple event tracks? (cf. NOVA)
   - If we didn't use linear interpolated tracks then could save the cycles? - TODO
   - Or have a convention where the first N tracks are events and the next M are linear?
   => No, multiple event tracks would be a PITA.

Horizontal Twisty Bar!
~~~
- Done.
- Would be better to combine with other FX (plenty of cycle time per rasterline).
  - Scroller?

More ideas for wipes/transitions
~~~
- Use the frequency grid for blocky wipes with colour ripple.
- Have the spinning bar fill the screen (watch out for overflow) and then swap to another wipe.
- Could animate large 'convex raster shapes' from prefilled scanlines, make these move then fill the screen.
- 